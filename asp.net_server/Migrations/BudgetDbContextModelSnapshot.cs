// <auto-generated />
using System;
using App.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(BudgetDbContext))]
    partial class BudgetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("App.Models.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("App.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("App.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Models.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "AccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("App.Models.UserFund", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("FundId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "FundId");

                    b.HasIndex("FundId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFunds");
                });

            modelBuilder.Entity("App.Models.Account", b =>
                {
                    b.OwnsOne("App.Models.Money", "Balance", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .HasColumnType("text");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.Fund", b =>
                {
                    b.OwnsOne("App.Models.Money", "Current", b1 =>
                        {
                            b1.Property<int>("FundId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .HasColumnType("text");

                            b1.HasKey("FundId");

                            b1.ToTable("Funds");

                            b1.WithOwner()
                                .HasForeignKey("FundId");
                        });

                    b.OwnsOne("App.Models.Money", "GoalAmount", b1 =>
                        {
                            b1.Property<int>("FundId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .HasColumnType("text");

                            b1.HasKey("FundId");

                            b1.ToTable("Funds");

                            b1.WithOwner()
                                .HasForeignKey("FundId");
                        });

                    b.Navigation("Current")
                        .IsRequired();

                    b.Navigation("GoalAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.Transaction", b =>
                {
                    b.HasOne("App.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("App.Models.Money", "Money", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .HasColumnType("text");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Money")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.User", b =>
                {
                    b.OwnsOne("App.Models.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Password")
                                .HasColumnType("text");

                            b1.Property<int?>("Role")
                                .HasColumnType("integer");

                            b1.Property<string>("UserName")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.UserAccount", b =>
                {
                    b.HasOne("App.Models.Account", "Account")
                        .WithMany("UserAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Models.UserFund", b =>
                {
                    b.HasOne("App.Models.Fund", "Fund")
                        .WithMany("UserFunds")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.User", "User")
                        .WithMany("UserFunds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Models.Account", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("App.Models.Fund", b =>
                {
                    b.Navigation("UserFunds");
                });

            modelBuilder.Entity("App.Models.User", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("UserFunds");
                });
#pragma warning restore 612, 618
        }
    }
}
